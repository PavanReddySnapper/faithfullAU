{% include 'shogun-content-handler' %}
{% render 'shogun-content-handler' %}
<!doctype html>
<html class="no-js supports-no-cookies" lang="{{ shop.locale }}">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width,initial-scale=1">
    <meta name="theme-color" content="{{ settings.color_accent }}">

    {%- if current_tags -%}
      <meta name="robots" content="noindex,follow">
    {%- endif -%}

    <link rel="canonical" href="{{ canonical_url }}">

    {%- render 'dns-preconnects' -%}

    {% liquid
      render 'css-variables'
      render 'vite-tag' with '@/styles/layout/theme.scss'
    %}

    {%- capture seo_title -%}
      {{ page_title }}
      {%- if current_tags -%}{%- assign meta_tags = current_tags | join: ', ' -%} &ndash; {{ 'general.meta.tags' | t: tags: meta_tags -}}{%- endif -%}
      {%- if current_page != 1 %} &ndash; {{ 'general.meta.page' | t: page: current_page }}{%- endif -%}
      {%- assign escaped_page_title = page_title | escape -%}
      {%- unless escaped_page_title contains shop.name %} &ndash; {{ shop.name }}{%- endunless -%}
    {%- endcapture -%}

    <title>{{ seo_title | strip }}</title>

    {%- if page_description -%}
      <meta name="description" content="{{ page_description | escape }}">
    {%- endif -%}

    {%- render 'favicon' -%}

    {% render 'vite-tag' with '@/scripts/layout/theme.js' %}
    {% if settings.load_jquery %}
      <script defer src="{{ 'jquery-351.min.js' | asset_url }}"></script>
    {% endif %}
    {%- render 'regionalisation' -%}

    {%- liquid
      assign search_fields_list = ''
      if settings.search_body == true
        assign search_fields_list = search_fields_list | append: 'body' | append: ','
      endif
      if settings.search_product_type == true
        assign search_fields_list = search_fields_list | append: 'product_type' | append: ','
      endif
      if settings.search_tag == true
        assign search_fields_list = search_fields_list | append: 'tag' | append: ','
      endif
      if settings.search_title == true
        assign search_fields_list = search_fields_list | append: 'title' | append: ','
      endif
      if settings.search_variants_barcode == true
        assign search_fields_list = search_fields_list | append: 'variants.barcode' | append: ','
      endif
      if settings.search_variants_sku == true
        assign search_fields_list = search_fields_list | append: 'variants.sku' | append: ','
      endif
      if settings.search_variants_title == true
        assign search_fields_list = search_fields_list | append: 'variants.title' | append: ','
      endif
      if settings.search_vendor == true
        assign search_fields_list = search_fields_list | append: 'vendor' | append: ','
      endif
      assign search_fields_array = search_fields_list | split: ','
      capture search_fields
        for item in search_fields_array
          echo item
          unless forloop.last
            echo ','
          endunless
        endfor
      endcapture

      # ---------------------------------------------------------------------------------
      # SEARCH SUGGESTIONS
      # ---------------------------------------------------------------------------------

      assign search_suggestions_terms = settings.search_suggestions_terms | replace: ', ', ',' | split: ',' | json
    -%}

    {%- capture search_suggestions_links -%}
      [
        {%- if settings.search_suggestions_links -%}
          {% for link in linklists[settings.search_suggestions_links].links %}
            {
              "title": {{ link.title | json }},
              "url": {{ link.url | json }}
            }{% unless forloop.last %},{% endunless %}
          {% endfor %}
        {%- endif -%}
      ]
    {%- endcapture -%}

    <script>
      document.documentElement.className = document.documentElement.className.replace('no-js', '');
      window.theme = {
        ecommerce: {{ settings.enable_ecommerce | json }},
        strings: {
          addToCart: {{ 'products.product.add_to_cart' | t | json }},
          addedToCart: {{ 'products.product.added_message' | t | json }},
          soldOut: {{ 'products.product.sold_out' | t | json }},
          oneRemaining: {{ 'products.product.one_remaining' | t | json }},
          unavailable: {{ 'products.product.unavailable' | t | json }},
          cart: {
            title: {{ 'cart.general.title' | t | json }},
            subtotal: {{ 'cart.general.subtotal' | t | json }},
            shipping: {{ 'cart.general.shipping' | t | json }},
            checkout: {{ 'cart.general.checkout' | t | json }},
            close: {{ 'cart.general.close_cart' | t | json }},
            loading: {{ 'cart.general.loading_message' | t | json }},
            itemQuantity: {{ 'cart.general.item_quantity' | t | json }},
            remove: {{ 'cart.general.remove' | t | json }},
            dismissErrorMessage: {{ 'cart.general.dismiss_error_message' | t | json }},
            empty: {
              title: {{ 'cart.general.empty.title' | t | json }},
              text: {{ 'cart.general.empty.text' | t | json }},
              continue_shopping: {{ 'cart.general.empty.continue_shopping' | t | json }}
            },
            note: {
              prompt: {{ 'cart.general.note.prompt' | t | json }},
              label: {{ 'cart.general.note.label' | t | json }}
            },
          },
          freeShippingBar: {
            remaining: {{ 'cart.freeShippingBar.remaining' | t | json }},
            reached: {{ 'cart.freeShippingBar.reached' | t | json }},
          },
          cartUpsells: {
            title: {{ 'cart.upsells.title' | t | json }},
            add: {{ 'cart.upsells.add' | t | json }},
            view: {{ 'cart.upsells.view' | t | json }},
          },
          pagination: {
            loadMore: {{ 'general.pagination.load_more' | t | json }},
            loadPrevious: {{ 'general.pagination.load_previous' | t | json }},
            loading: {{ 'general.pagination.loading' | t | json }},
          },
          products: {
            variantSelect: {
              emptyError: {{ 'products.variant_select.empty_error' | t | json }},
            }
          },
          search: {
            search: {{ 'general.search.search' | t | json }},
            submit: {{ 'general.search.submit' | t | json }},
            close: {{ 'general.search.close' | t | json }},
            placeholder: {{ 'general.search.placeholder' | t | json }},
            helpText: {{ 'general.search.search_help_text' | t | json }},
            viewAll: {{ 'general.search.view_all' | t | json }},
            noResultsHtml: {{ 'general.search.no_results_html' | t | json }},
            instantResults: {{ 'general.search.instant_results' | t | json }},
            instantNoResults: {{ 'general.search.instant_no_results' | t | json }},
            typeSuggestions: {{ 'general.search.type_suggestions' | t | json }},
            typeProducts: {{ 'general.search.type_products' | t | json }},
            typeCollections: {{ 'general.search.type_collections' | t | json }},
            typeArticles: {{ 'general.search.type_articles' | t | json }},
            typePages: {{ 'general.search.type_pages' | t | json }},
            suggestions: {
              terms: {{ 'general.search.suggestions.terms' | t | json }},
              links: {{ 'general.search.suggestions.links' | t | json }},
              products: {{ 'general.search.suggestions.products' | t | json }},
            }
          },
           collection: {
            readMore: {{ 'collections.general.read_more' | t | json }},
            readLess: {{ 'collections.general.read_less' | t | json }}
          }
        },
        moneyFormat: {{ shop.money_format | json }},
        cart: {{ cart | json }},
        searchSettings: {
          enableInstantSearch: {{ settings.enable_instant_search | json }},
          types: [
            {%- if settings.search_display_collections -%}'collection',{%- endif -%}
            {%- if settings.search_display_pages -%}'page',{%- endif -%}
            {%- if settings.search_display_articles -%}'article',{%- endif -%}
          ],
          unavailable_products: {{ settings.search_unavailable_products | json }},
          limit: {{ settings.search_header_display_results | json }},
          fields: {{ search_fields | json }},
          suggestions: {
            enabled: {{ settings.show_custom_search_suggestions | json }},
            terms: {{ search_suggestions_terms }},
            links: {{ search_suggestions_links }},
            products: {% if settings.search_suggestions_collection %}true{% else %}false{% endif %}
          },
        },
        freeShippingBar: {
          enabled: {{ settings.free_shipping_bar_enabled | json }},
          serviceOne: {{ settings.free_shipping_bar_service_1 | json }},
          thresholdOne: {{ settings.free_shipping_bar_threshold_1 | default: 0 | json }},
          {%- liquid
            assign threshold_1_num = settings.free_shipping_bar_threshold_1 | plus: 0
            assign threshold_2_num = settings.free_shipping_bar_threshold_2 | plus: 0
            if threshold_2_num > threshold_1_num and settings.free_shipping_bar_service_2 != blank
              assign valid_threshold_2 = true
            endif
          -%}
          {%- if valid_threshold_2 -%}
          serviceTwo: {{ settings.free_shipping_bar_service_2 | json }},
          thresholdTwo: {{ settings.free_shipping_bar_threshold_2 | json }},
          {% endif %}
        },
        cartEmpty: {
          link: {{ settings.cart_continue_shopping_link | json }},
        },
        cartNote: {
          enabled: {{ settings.cart_note_enabled | json }}
        },
        cartUpsells: {
          enabled: false,
          limit: 0,
        },
        shippingPrice: {{ settings.cart_shipping_price | json }},
        breakpoints: {
          sm: {{ settings.grid_small | json }},
          md: {{ settings.grid_medium | json }},
          lg: {{ settings.grid_large | json }},
          xl: {{ settings.grid_xl | json }},
        },
        locale: {
          endonymName: {{ request.locale.endonym_name | json }},
          isoCode: {{ request.locale.iso_code | json }},
          name: {{ request.locale.name | json }},
          primary: {{ request.locale.primary | json }},
          rootUrl: {{ request.locale.root_url | json }},
          pageType: {{ request.page_type | json }},
        },
        urlPatterns: {
          assetUrl: {{ '_name_.js' | asset_url | json }},
          fileUrl: {{ '_name_.js' | file_url | json }},
        },
        cartMessage: {
          enabled: {% if settings.custom_message_enabled and settings.custom_message != blank %}true{% else %}false{% endif %},
          text: {{ settings.custom_message | json }},
        },
        storefrontAPI: {
          version: {{ settings.storefront_api_version | json }},
          key: {{ settings.storefront_api_key | json }},
        },
      };
    </script>

    {{ content_for_header }}

    {% liquid
      render 'social-meta-tags'
      render 'marker-io-script'
      render 'littledata-layer'
      render 'gtm', position: 'head'
    %}

    {% render 'shogun-head' %}
    {{ 'custom.css' | asset_url | stylesheet_tag }}
  </head>

  <body id="{{ page_title | handle }}" class="template-{{ request.page_type | handle }}">
    {% render 'gtm', position: 'body' %}

    {%- if settings.enable_fader -%}<div class="fader-overlay" data-fader></div>{%- endif -%}

    <a class="in-page-link visually-hidden skip-link" href="#MainContent" aria-label="Skip to main content">
      {{- 'general.accessibility.skip_to_content' | t -}}
    </a>

    {% sections 'header-group' %}

    <main id="MainContent">
      {{ content_for_layout }}
    </main>

    {% liquid
      sections 'footer-group'
      section 'login-modal'
      section 'newsletter-popup'

      unless request.page_type == 'cart'
        render 'component-side-cart'
      endunless

      render 'swatches'
      render 'json-ld'
      render 'ga4'
      render 'klaviyo-id'
      render 'instant-page'
      render 'swymSnippet'
      render 'swym-custom-cart'
    %}

    <!-- Notify Code Start Here -->
    <script src="https://a.klaviyo.com/media/js/onsite/onsite.js"></script>
    <script>
      var klaviyo = klaviyo || [];
      klaviyo.init({
        account: "V3iGft",
        platform: "shopify"
      });
      klaviyo.enable("backinstock",{
        trigger: {
          product_page_text: "Notify Me",
          product_page_class: "btn",
          product_page_text_align: "center",
          product_page_margin: "0px",
          replace_anchor: true
        },
        modal: {
         headline: "{product_name}",
         body_content: "Register to receive a notification when this item comes back in stock.",
         email_field_label: "Email address",
         button_label: "Notify Me",
         newsletter_subscribe_label: "By signing up I agree to the terms and conditions and privacy policy.",
         subscribe_checked: false,
         subscription_success_label: "You’re in! We’ll let you know when it’s available.",
         footer_content: '',
         additional_styles: "@import url('{{ 'klaviyo-bis-modal.css' | asset_url }}');",
         drop_background_color: "#0f0f0f",
         background_color: "#fcfbf8",
         text_color: "#0f0f0f",
         button_text_color: "#0f0f0f",
         button_background_color: "#fcfbf8",
         close_button_color: "#0f0f0f",
         error_background_color: "#fff",
         error_text_color: "#0f0f0f",
         success_background_color: "#f2f7f1",
         success_text_color: "#88a180"
        }
      });
    </script>
    <style>
      .template-product .product__form-actions-wrapper .btn--add-to-cart[disabled] {
        display:none;
      }
      a.klaviyo-bis-trigger {
        background-color: #fcfbf8;
        color: #0f0f0f;
        margin-top:-1px !important;
        width:100%!important;
        justify-content: left;
        padding:1rem;
      }
      a.klaviyo-bis-trigger:hover {
        background-color: #0f0f0f;
        color: #fcfbf8;
      }
      @media (max-width:989px){
        a.klaviyo-bis-trigger {
          padding:1rem 0.75rem!important;
          border-width:1px 0;
        }
      }
    </style>
    <!-- Notify Code Ends Here -->

    {% comment %}script for shipping charges table{% endcomment %}
    <script>

      function moveElement() {
  let getElement = document.querySelector(".geo-location");
  let getNavElement = document.querySelector(".nav__mobile-footer-links");
  let getHeadElement = document.querySelector(".header__actions");
  
  if (window.innerWidth < 767) {
    if (getElement && getNavElement) {
      getNavElement.appendChild(getElement);
    }
  } else if(getElement && getHeadElement) {
    getHeadElement.appendChild(getElement);
  }
}

// Run on load
moveElement();
  window.addEventListener("resize", function () {
  moveElement();
});
       if(document.querySelector('.country-return-section')){
           let regions = document.querySelectorAll('.country-return-section h2');

           let tableRegions = `
<div class="parent-container container container--sm">
  <div class="main-table-header">
`;

           regions.forEach((region) => {
               tableRegions += `<button class="region-header" data-region="${region.textContent.toLowerCase()}">${region.textContent}</button>`;
           });

           tableRegions += `
  </div>
  <div class="main-table-content"></div>
</div>`;

           let firstShopifySection = document.querySelector('#MainContent .shopify-section');

           if (firstShopifySection) {
               firstShopifySection.insertAdjacentHTML('afterend', tableRegions);
           }

           let countryReturnSections = document.querySelectorAll('.country-return-section');
           let mainTableContent = document.querySelector('.main-table-content');

           if (mainTableContent && countryReturnSections.length > 0) {
               countryReturnSections.forEach((section) => {
                   mainTableContent.appendChild(section);
                   section.style.display = 'none';
               });
           }

           let regionButtons = document.querySelectorAll('.region-header');

           regionButtons.forEach((button) => {
               button.addEventListener('click', () => {
                   let selectedRegion = button.getAttribute('data-region');

                   countryReturnSections.forEach((section) => {
                       let regionHeading = section.querySelector('h2').textContent.toLowerCase();
                       section.style.display = regionHeading === selectedRegion ? 'block' : 'none';
                       section.querySelector('h2').style.display = 'none'
                   });

                   regionButtons.forEach((btn) => btn.classList.remove('active'));
                   button.classList.add('active');
                   mainTableContent.h2.style.display = 'none'
               });
           });

           if (regionButtons.length > 0) {
               regionButtons[0].click();
           }

       }
    </script>

    <style>
 
/* Ensure text is always black on mobile - TOP PRIORITY */
@media (max-width: 768px) {
body.template-index button.md-orbe-custom-selector > span,
body .header--is-pinned button.md-orbe-custom-selector > span,
body button.md-orbe-custom-selector > span {
        color: #000 !important; /* Always black on mobile */
    }
}
 
/* Default button styling (white text) for home page (.template-index) on desktop */
@media (min-width: 769px) {
body.template-index button.md-orbe-custom-selector > span,
body.template-index header.header:not(.header--is-pinned) button.md-orbe-custom-selector > span {
        font-family: var(--font-body) !important;
        font-weight: 500 !important;
        font-size: 13px !important;
        color: #fff !important; /* White only on home page */
        padding-left: 0px;
    }
}
 
/* Hover effect on desktop home page (turns black) */
@media (min-width: 769px) {
body.template-index header.header:hover button.md-orbe-custom-selector > span {
        color: #000 !important; /* Black on hover for home page */
    }
}
 
/* When the header is pinned on desktop home page */
@media (min-width: 769px) {
body.template-index .header--is-pinned button.md-orbe-custom-selector > span {
        color: #000 !important; /* Black when pinned on home page */
    }
}
 
/* For ALL other pages on desktop, text is ALWAYS black */
@media (min-width: 769px) {
body:not(.template-index) button.md-orbe-custom-selector > span {
        font-family: var(--font-body) !important;
        font-weight: 500 !important;
        font-size: 13px !important;
        color: #000 !important; /* Always black on other pages */
        padding-left: 0px;
    }
}
 
    </style>
   
  </body>
</html>
